name: CI Template

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  POETRY_VERSION: 1.8.4
  PYTHON_VERSION: 3.11
  AWS_REGION: eu-west-1

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false
      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: poetry install
      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        env:
          PYTHONPATH: ${{ github.workspace }}/${{ inputs.working-directory }}
        run: just test

  build-and-push:
    if: github.ref == 'refs/heads/main'
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg GIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG \
            -f Dockerfile.lambda .
          docker push $ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG 